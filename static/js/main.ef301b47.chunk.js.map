{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","notify","toast","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","state","before","after","col","inputdata","filename","handleForce","data","_this","setState","handleList","console","log","i","length","map","datas","react_default","a","createElement","DataList","key","handleBefore","e","target","value","handleAfter","handleCol","handleName","OutputButton","_this2","this","Fragment","react_toastify","Back","Container","react_csv_reader_default","cssClass","label","onFileLoaded","Input","placeholder","onChange","Button","onClick","LickContainer","react_csv","className","Component","styled","div","_templateObject","_templateObject2","input","_templateObject3","_templateObject4","button","_templateObject5","_templateObject6","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ef301b47.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport CSVReader from \"react-csv-reader\";\r\nimport { CSVLink, CSVDownload } from \"react-csv\";\r\nimport styled from \"styled-components\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nclass App extends Component {\r\n  notify = () =>{\r\n    toast(\"변경 완료 다운 받으세요\", {\r\n      position: \"bottom-center\",\r\n      autoClose: 3000,\r\n      hideProgressBar: true,\r\n      closeOnClick: false,\r\n      pauseOnHover: false,\r\n      draggable: false\r\n    });\r\n  }\r\n  \r\n  state = {\r\n    before: \"\",\r\n    after: \"\",\r\n    col: \"\",\r\n    inputdata: [],\r\n    filename: \"\"\r\n  };\r\n \r\n  render() {\r\n    return (\r\n      <>\r\n        <ToastContainer />\r\n        <Back>\r\n          <Container>\r\n            <CSVReader\r\n              cssClass=\"react-csv-input\"\r\n              label=\"CSV파일 선택\"\r\n              onFileLoaded={this.handleForce}\r\n            />\r\n            {this.handleList()}\r\n            <Input\r\n              placeholder=\"칼럼번호\"\r\n              value={this.state.col}\r\n              onChange={this.handleCol}\r\n            />\r\n            <Input\r\n              placeholder=\"변경 전\"\r\n              value={this.state.before}\r\n              onChange={this.handleBefore}\r\n            />\r\n            <Input\r\n              placeholder=\"변경 후\"\r\n              value={this.state.after}\r\n              onChange={this.handleAfter}\r\n            />\r\n            <Input\r\n              placeholder=\"생성 파일명\"\r\n              value={this.state.filename}\r\n              onChange={this.handleName}\r\n            />\r\n            <Button\r\n              onClick={() => {\r\n                this.OutputButton(\r\n                  this.state.inputdata,\r\n                  this.state.before,\r\n                  this.state.after,\r\n                  this.state.col\r\n                );\r\n              }}\r\n            >\r\n              변경하기\r\n            </Button>\r\n            <LickContainer>\r\n              <CSVLink\r\n                data={this.state.inputdata}\r\n                filename={this.state.filename + \".csv\"}\r\n                className=\"buttonhi\"\r\n                target=\"_blank\"\r\n              >\r\n                파일 다운로드\r\n              </CSVLink>\r\n            </LickContainer>\r\n          </Container>\r\n        </Back>\r\n      </>\r\n    );\r\n  }\r\n  handleForce = data => {\r\n    this.setState({ inputdata: data });\r\n  };\r\n  handleList = () => {\r\n    console.log(this.state.inputdata);\r\n    var i = 0;\r\n    if (this.state.inputdata.length !== 0) {\r\n      return this.state.inputdata[0].map(datas => {\r\n        return (\r\n          <DataList key={i}>\r\n            {i++}:{datas}\r\n          </DataList>\r\n        );\r\n      });\r\n    }\r\n  };\r\n  handleBefore = e => {\r\n    this.setState({\r\n      before: e.target.value\r\n    });\r\n  };\r\n  handleAfter = e => {\r\n    this.setState({\r\n      after: e.target.value\r\n    });\r\n  };\r\n  handleCol = e => {\r\n    this.setState({\r\n      col: e.target.value\r\n    });\r\n  };\r\n  handleName = e => {\r\n    this.setState({\r\n      filename: e.target.value\r\n    });\r\n  };\r\n  OutputButton = (data, before, after, col) => {\r\n    for (var i = 0; i < data.length; i++) {\r\n      if (data[i][col] === before) {\r\n        data[i][col] = after;\r\n      }\r\n    }\r\n    this.setState({\r\n      inputdata: data\r\n    });\r\n    this.notify();\r\n  };\r\n}\r\nconst DataList = styled.div`\r\n  height: 30px;\r\n  width: 100%;\r\n  border: 1px solid black;\r\n  background-color:#ffffff;\r\n`;\r\nconst Container = styled.div`\r\n  height: 100%;\r\n  width: 300px;\r\n  margin: auto;\r\n`;\r\nconst Input = styled.input`\r\n  height: 50px;\r\n  width: 100%;\r\n  margin-top: 5px;\r\n`;\r\nconst LickContainer = styled.div`\r\n  height: 40px;\r\n  width: 150px;\r\n  margin: auto;\r\n  text-align: center;\r\n  justify-content: center;\r\n`;\r\nconst Button = styled.button`\r\n  height: 40px;\r\n  width: 150px;\r\n  display: block;\r\n  margin: auto;\r\n  font-size: 16px;\r\n  margin-top: 5px;\r\n`;\r\nconst Back = styled.div`\r\n  background-image: linear-gradient(to bottom right, #989ade, #5f6ccc);\r\n  height: 100%;\r\n  width: 100%;\r\n`;\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}