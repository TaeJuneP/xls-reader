{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","before","after","col","inputdata","filename","handleForce","data","_this","setState","handleList","console","log","i","length","map","datas","react_default","a","createElement","DataList","key","handleBefore","e","target","value","handleAfter","handleCol","handleName","OutputButton","_this2","this","Container","react_csv_reader_default","cssClass","label","onFileLoaded","Input","placeholder","onChange","Button","onClick","LickContainer","react_csv","className","Component","styled","div","_templateObject","_templateObject2","input","_templateObject3","_templateObject4","button","_templateObject5","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ygCAKMA,6MACJC,MAAQ,CACNC,OAAQ,GACRC,MAAO,GACPC,IAAK,GACLC,UAAW,GACXC,SAAU,MAsDZC,YAAc,SAAAC,GACZC,EAAKC,SAAS,CAAEL,UAAWG,OAE7BG,WAAa,WACXC,QAAQC,IAAIJ,EAAKR,MAAMI,WACvB,IAAIS,EAAI,EACR,GAAoC,IAAhCL,EAAKR,MAAMI,UAAUU,OACvB,OAAON,EAAKR,MAAMI,UAAU,GAAGW,IAAI,SAAAC,GACjC,OACEC,EAAAC,EAAAC,cAACC,EAAD,CAAUC,IAAKR,GACZA,IADH,IACSG,QAMjBM,aAAe,SAAAC,GACbf,EAAKC,SAAS,CACZR,OAAQsB,EAAEC,OAAOC,WAGrBC,YAAc,SAAAH,GACZf,EAAKC,SAAS,CACZP,MAAOqB,EAAEC,OAAOC,WAGpBE,UAAY,SAAAJ,GACVf,EAAKC,SAAS,CACZN,IAAKoB,EAAEC,OAAOC,WAGlBG,WAAa,SAAAL,GACXf,EAAKC,SAAS,CACZJ,SAAUkB,EAAEC,OAAOC,WAGvBI,aAAe,SAACtB,EAAMN,EAAQC,EAAOC,GACnCQ,QAAQC,IAAIL,EAAKO,QACjBH,QAAQC,IAAIL,EAAKJ,IACjB,IAAK,IAAIU,EAAI,EAAGA,EAAIN,EAAKO,OAAQD,IAC3BN,EAAKM,GAAGV,KAASF,IACnBM,EAAKM,GAAGV,GAAOD,GAGnBS,QAAQC,IAAIL,4EAhGL,IAAAuB,EAAAC,KACP,OACEd,EAAAC,EAAAC,cAACa,EAAD,KACEf,EAAAC,EAAAC,cAACc,EAAAf,EAAD,CACEgB,SAAS,kBACTC,MAAM,+BACNC,aAAcL,KAAKzB,cAEpByB,KAAKrB,aACNO,EAAAC,EAAAC,cAACkB,EAAD,CACEC,YAAY,2BACZb,MAAOM,KAAK/B,MAAMG,IAClBoC,SAAUR,KAAKJ,YAEjBV,EAAAC,EAAAC,cAACkB,EAAD,CACEC,YAAY,sBACZb,MAAOM,KAAK/B,MAAMC,OAClBsC,SAAUR,KAAKT,eAEjBL,EAAAC,EAAAC,cAACkB,EAAD,CACEC,YAAY,sBACZb,MAAOM,KAAK/B,MAAME,MAClBqC,SAAUR,KAAKL,cAEjBT,EAAAC,EAAAC,cAACkB,EAAD,CACEC,YAAY,kCACZb,MAAOM,KAAK/B,MAAMK,SAClBkC,SAAUR,KAAKH,aAEjBX,EAAAC,EAAAC,cAACqB,EAAD,CACEC,QAAS,WACPX,EAAKD,aACHC,EAAK9B,MAAMI,UACX0B,EAAK9B,MAAMC,OACX6B,EAAK9B,MAAME,MACX4B,EAAK9B,MAAMG,OANjB,4BAUAc,EAAAC,EAAAC,cAACuB,EAAD,KACAzB,EAAAC,EAAAC,cAACwB,EAAA,QAAD,CACEpC,KAAMwB,KAAK/B,MAAMI,UACjBC,SAAU0B,KAAK/B,MAAMK,SAAW,OAChCuC,UAAU,WACVpB,OAAO,UAJT,kDAhDUqB,aA2GZzB,EAAW0B,IAAOC,IAAVC,KAKRhB,EAAYc,IAAOC,IAAVE,KAKTZ,EAAQS,IAAOI,MAAVC,KAKLT,EAAgBI,IAAOC,IAAVK,KAObZ,EAASM,IAAOO,OAAVC,KAQGvD,IClIKwD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5C,EAAAC,EAAAC,cAAC2C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e121316b.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport CSVReader from \"react-csv-reader\";\nimport { CSVLink, CSVDownload } from \"react-csv\";\nimport styled from \"styled-components\";\nclass App extends Component {\n  state = {\n    before: \"\",\n    after: \"\",\n    col: \"\",\n    inputdata: [],\n    filename: \"\"\n  };\n  render() {\n    return (\n      <Container>\n        <CSVReader\n          cssClass=\"react-csv-input\"\n          label=\"CSV파일 선택\"\n          onFileLoaded={this.handleForce}\n        />\n        {this.handleList()}\n        <Input\n          placeholder=\"칼럼번호\"\n          value={this.state.col}\n          onChange={this.handleCol}\n        />\n        <Input\n          placeholder=\"변경 전\"\n          value={this.state.before}\n          onChange={this.handleBefore}\n        />\n        <Input\n          placeholder=\"변경 후\"\n          value={this.state.after}\n          onChange={this.handleAfter}\n        />\n        <Input\n          placeholder=\"생성 파일명\"\n          value={this.state.filename}\n          onChange={this.handleName}\n        />\n        <Button\n          onClick={() => {\n            this.OutputButton(\n              this.state.inputdata,\n              this.state.before,\n              this.state.after,\n              this.state.col\n            );\n          }}\n        >변경하기</Button>\n        <LickContainer>\n        <CSVLink\n          data={this.state.inputdata}\n          filename={this.state.filename + \".csv\"}\n          className=\"buttonhi\"\n          target=\"_blank\"\n        >\n          파일 다운로드\n        </CSVLink>\n        </LickContainer>\n      </Container>\n    );\n  }\n  handleForce = data => {\n    this.setState({ inputdata: data });\n  };\n  handleList = () => {\n    console.log(this.state.inputdata);\n    var i = 0;\n    if (this.state.inputdata.length !== 0) {\n      return this.state.inputdata[0].map(datas => {\n        return (\n          <DataList key={i}>\n            {i++}:{datas}\n          </DataList>\n        );\n      });\n    }\n  };\n  handleBefore = e => {\n    this.setState({\n      before: e.target.value\n    });\n  };\n  handleAfter = e => {\n    this.setState({\n      after: e.target.value\n    });\n  };\n  handleCol = e => {\n    this.setState({\n      col: e.target.value\n    });\n  };\n  handleName = e => {\n    this.setState({\n      filename: e.target.value\n    });\n  };\n  OutputButton = (data, before, after, col) => {\n    console.log(data.length);\n    console.log(data[col]);\n    for (var i = 0; i < data.length; i++) {\n      if (data[i][col] === before) {\n        data[i][col] = after;\n      }\n    }\n    console.log(data);\n  };\n}\nconst DataList = styled.div`\n  height: 30px;\n  width: 100%;\n  border: 1px solid black;\n`;\nconst Container = styled.div`\n  height: 100%;\n  width: 300px;\n  margin: auto;\n`;\nconst Input = styled.input`\n  height: 50px;\n  width: 100%;\n  margin-top:5px;\n`;\nconst LickContainer = styled.div`\n  height:40px;\n  width:150px;\n  margin:auto;\n  text-align:center;\n  justify-content:center;\n`\nconst Button = styled.button`\n  height: 40px;\n  width: 150px;\n  display: block;\n  margin: auto;\n  font-size:16px;\n  margin-top:5px;\n`;\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}